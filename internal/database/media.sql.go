// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: media.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addMedia = `-- name: AddMedia :one
INSERT INTO media (content_id, content_url, extractor_id, caption, nsfw)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, content_id, content_url, extractor_id, caption, nsfw, created_at, updated_at
`

type AddMediaParams struct {
	ContentID   string
	ContentUrl  string
	ExtractorID string
	Caption     pgtype.Text
	Nsfw        bool
}

func (q *Queries) AddMedia(ctx context.Context, arg AddMediaParams) (Media, error) {
	row := q.db.QueryRow(ctx, addMedia,
		arg.ContentID,
		arg.ContentUrl,
		arg.ExtractorID,
		arg.Caption,
		arg.Nsfw,
	)
	var i Media
	err := row.Scan(
		&i.ID,
		&i.ContentID,
		&i.ContentUrl,
		&i.ExtractorID,
		&i.Caption,
		&i.Nsfw,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMedias = `-- name: GetMedias :many
SELECT id, content_id, content_url, extractor_id, caption, nsfw, created_at, updated_at FROM media ORDER BY id
`

func (q *Queries) GetMedias(ctx context.Context) ([]Media, error) {
	rows, err := q.db.Query(ctx, getMedias)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Media
	for rows.Next() {
		var i Media
		if err := rows.Scan(
			&i.ID,
			&i.ContentID,
			&i.ContentUrl,
			&i.ExtractorID,
			&i.Caption,
			&i.Nsfw,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
