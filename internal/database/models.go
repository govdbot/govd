// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChatType string

const (
	ChatTypePrivate ChatType = "private"
	ChatTypeGroup   ChatType = "group"
)

func (e *ChatType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatType(s)
	case string:
		*e = ChatType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatType: %T", src)
	}
	return nil
}

type NullChatType struct {
	ChatType ChatType
	Valid    bool // Valid is true if ChatType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatType) Scan(value interface{}) error {
	if value == nil {
		ns.ChatType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatType), nil
}

type MediaCodec string

const (
	MediaCodecAvc    MediaCodec = "avc"
	MediaCodecHevc   MediaCodec = "hevc"
	MediaCodecVp9    MediaCodec = "vp9"
	MediaCodecVp8    MediaCodec = "vp8"
	MediaCodecAv1    MediaCodec = "av1"
	MediaCodecWebp   MediaCodec = "webp"
	MediaCodecAac    MediaCodec = "aac"
	MediaCodecOpus   MediaCodec = "opus"
	MediaCodecVorbis MediaCodec = "vorbis"
	MediaCodecMp3    MediaCodec = "mp3"
	MediaCodecFlac   MediaCodec = "flac"
)

func (e *MediaCodec) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MediaCodec(s)
	case string:
		*e = MediaCodec(s)
	default:
		return fmt.Errorf("unsupported scan type for MediaCodec: %T", src)
	}
	return nil
}

type NullMediaCodec struct {
	MediaCodec MediaCodec
	Valid      bool // Valid is true if MediaCodec is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMediaCodec) Scan(value interface{}) error {
	if value == nil {
		ns.MediaCodec, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MediaCodec.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMediaCodec) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MediaCodec), nil
}

type MediaType string

const (
	MediaTypePhoto MediaType = "photo"
	MediaTypeVideo MediaType = "video"
	MediaTypeAudio MediaType = "audio"
)

func (e *MediaType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MediaType(s)
	case string:
		*e = MediaType(s)
	default:
		return fmt.Errorf("unsupported scan type for MediaType: %T", src)
	}
	return nil
}

type NullMediaType struct {
	MediaType MediaType
	Valid     bool // Valid is true if MediaType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMediaType) Scan(value interface{}) error {
	if value == nil {
		ns.MediaType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MediaType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMediaType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MediaType), nil
}

type Chat struct {
	ID        int64
	ChatID    int64
	Type      ChatType
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type Media struct {
	ID          int64
	ContentID   string
	ContentUrl  string
	ExtractorID string
	Caption     pgtype.Text
	Nsfw        bool
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type MediaFormat struct {
	ID         int64
	ItemID     int64
	FormatID   string
	FileID     string
	AudioCodec NullMediaCodec
	VideoCodec NullMediaCodec
	Width      pgtype.Int4
	Height     pgtype.Int4
	Bitrate    pgtype.Int4
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

type MediaItem struct {
	ID        int64
	MediaID   int64
	Type      MediaType
	Duration  int32
	Title     pgtype.Text
	Artist    pgtype.Text
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type Settings struct {
	ID              int64
	ChatID          int64
	Nsfw            bool
	MediaAlbumLimit int32
	Silent          bool
	Language        string
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}
